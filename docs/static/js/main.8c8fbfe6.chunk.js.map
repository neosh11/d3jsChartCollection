{"version":3,"sources":["Components/Charts/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DrawChart","data","x","y","Math","random","yAccessor","d","xAccessor","dimensions","margin","top","right","bottom","left","ref","renderChartFn","dependencies","useRef","useEffect","d3","current","useD3","svg","console","log","node","getBoundingClientRect","width","height","boundedWidth","boundedHeight","attr","yScale","domain","range","xScale","select","append","lineGenerator","yAxisGenerator","xAxisGenerator","call","length","style","marginRight","marginLeft","className","transform","Chart","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wNAeMA,EAAY,WAOhB,IAAMC,EAAc,CAClB,CAAEC,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAG,EAAGC,EAAG,GACX,CAAED,EAAmB,IAAhBE,KAAKC,SAAgBF,EAAmB,IAAhBC,KAAKC,UAClC,CAAEH,EAAmB,IAAhBE,KAAKC,SAAgBF,EAAmB,IAAhBC,KAAKC,UAClC,CAAEH,EAAmB,IAAhBE,KAAKC,SAAgBF,EAAmB,IAAhBC,KAAKC,UAClC,CAAEH,EAAmB,IAAhBE,KAAKC,SAAgBF,EAAmB,IAAhBC,KAAKC,UAClC,CAAEH,EAAmB,IAAhBE,KAAKC,SAAgBF,EAAmB,IAAhBC,KAAKC,UAClC,CAAEH,EAAmB,IAAhBE,KAAKC,SAAgBF,EAAmB,IAAhBC,KAAKC,UAClC,CAAEH,EAAmB,IAAhBE,KAAKC,SAAgBF,EAAmB,IAAhBC,KAAKC,UAClC,CAAEH,EAAmB,IAAhBE,KAAKC,SAAgBF,EAAmB,IAAhBC,KAAKC,UAClC,CAAEH,EAAmB,IAAhBE,KAAKC,SAAgBF,EAAmB,IAAhBC,KAAKC,WAG9BC,EAAY,SAACC,GAAD,OAAeA,EAAEJ,GAC7BK,EAAY,SAACD,GAAD,OAAeA,EAAEL,GAK7BO,EAAa,CACjBC,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,KAIJC,EApDM,SAACC,EAAmCC,GAChD,IAAMF,EAAMG,iBAAO,MAQnB,OANAC,qBAAU,WAER,OADAH,EAAcI,IAAUL,EAAIM,UACrB,eAGN,CAACL,EAAeC,IACZF,EA2CKO,EACV,SAACC,GAAiE,IAAD,MAC/DC,QAAQC,IAAR,UAAYF,EAAIG,cAAhB,aAAY,EAAYC,wBAAwBC,OAEhD,IAAMA,EAAK,UAAGL,EAAIG,cAAP,aAAG,EAAYC,wBAAwBC,MAC5CC,EAAM,UAAGN,EAAIG,cAAP,aAAG,EAAYC,wBAAwBE,OACnD,GAAKD,GAAUC,EAAf,CAEA,IAAMC,EAAeF,EAAQnB,EAAWC,OAAOI,KAAOL,EAAWC,OAAOE,MAClEmB,EAAgBF,EAASpB,EAAWC,OAAOC,IAAMF,EAAWC,OAAOG,OAEzEU,EAAIS,KAAK,QAASJ,GAAOI,KAAK,SAAUH,GAExC,IAAMI,EAASb,MAAiBc,OAAOd,IAAUnB,EAAMK,IAAY6B,MAAM,CAACJ,EAAe,IAWnFK,GATuBb,EAC1Bc,OAAO,WACPC,OAAO,QACPN,KAAK,IAAK,GACVA,KAAK,QAASF,GACdE,KAAK,IAAK,GACVA,KAAK,SAAUD,GACfC,KAAK,OAAQ,WAEDZ,MAAiBc,OAAOd,IAAUnB,EAAMO,IAAY2B,MAAM,CAAC,EAAGL,KAEvES,EAAgBnB,MAEnBlB,GAAE,SAAAK,GAAC,OAAI6B,EAAO7B,EAAEL,MAChBC,GAAE,SAAAI,GAAC,OAAI0B,EAAO1B,EAAEJ,MAUbqC,GAROjB,EACVc,OAAO,WACPC,OAAO,QACPN,KAAK,IAAKO,EAActC,IACxB+B,KAAK,OAAQ,QACbA,KAAK,SAAU,WACfA,KAAK,eAAgB,GAEDZ,IAAYa,IAG7BQ,GAFQlB,EAAIc,OAAO,WAAWC,OAAO,KAAKI,KAAKF,GAE9BpB,IAAcgB,IACvBb,EAAIc,OAAO,WAAWC,OAAO,KAAKI,KAAKD,MAEvD,CAACxC,EAAK0C,OAAQlC,IAGhB,OACE,qBACEM,IAAKA,EACL6B,MAAO,CACLf,OAAQ,IACRD,MAAO,OACPiB,YAAa,MACbC,WAAY,OANhB,SASE,mBACEC,UAAU,SACVH,MAAO,CACLI,UAAU,aAAD,OAAevC,EAAWC,OAAOI,KAAjC,eAA4CL,EAAWC,OAAOC,IAA9D,aAgBJsC,EATD,WACZ,OACE,qCACE,uCACA,cAAC,EAAD,QClHSC,MATf,WACE,OACE,sBAAKH,UAAU,MAAf,UACE,gDACA,cAAC,EAAD,QCMSI,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8c8fbfe6.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport * as d3 from 'd3'\n\nconst useD3 = (renderChartFn: (svg: any) => void, dependencies: React.DependencyList | undefined) => {\n  const ref = useRef(null)\n\n  useEffect(() => {\n    renderChartFn(d3.select(ref.current))\n    return () => {\n      return\n    }\n  }, [renderChartFn, dependencies])\n  return ref\n}\n\nconst DrawChart = () => {\n  interface IPoint {\n    x: number\n    y: number\n  }\n  type TData = IPoint[]\n\n  const data: TData = [\n    { x: 1, y: 2 },\n    { x: 2, y: 3 },\n    { x: 3, y: 4 },\n    { x: 4, y: 5 },\n    { x: 5, y: 4 },\n    { x: 7, y: 2 },\n    { x: Math.random() * 100, y: Math.random() * 100 },\n    { x: Math.random() * 100, y: Math.random() * 100 },\n    { x: Math.random() * 100, y: Math.random() * 100 },\n    { x: Math.random() * 100, y: Math.random() * 100 },\n    { x: Math.random() * 100, y: Math.random() * 100 },\n    { x: Math.random() * 100, y: Math.random() * 100 },\n    { x: Math.random() * 100, y: Math.random() * 100 },\n    { x: Math.random() * 100, y: Math.random() * 100 },\n    { x: Math.random() * 100, y: Math.random() * 100 }\n  ]\n\n  const yAccessor = (d: IPoint) => d.y\n  const xAccessor = (d: IPoint) => d.x\n\n  //   const wrapper = d3.select('#wrapper')\n  //   const svg = wrapper.append('svg')\n\n  const dimensions = {\n    margin: {\n      top: 15,\n      right: 15,\n      bottom: 40,\n      left: 60\n    }\n  }\n\n  const ref = useD3(\n    (svg: d3.Selection<SVGSVGElement, unknown, HTMLElement, any>) => {\n      console.log(svg.node()?.getBoundingClientRect().width)\n\n      const width = svg.node()?.getBoundingClientRect().width\n      const height = svg.node()?.getBoundingClientRect().height\n      if (!width || !height) return\n\n      const boundedWidth = width - dimensions.margin.left - dimensions.margin.right\n      const boundedHeight = height - dimensions.margin.top - dimensions.margin.bottom\n\n      svg.attr('width', width).attr('height', height)\n\n      const yScale = d3.scaleLinear().domain(d3.extent(data, yAccessor)).range([boundedHeight, 0])\n\n      const freezingTemperatures = svg\n        .select('.bounds')\n        .append('rect')\n        .attr('x', 0)\n        .attr('width', boundedWidth)\n        .attr('y', 0)\n        .attr('height', boundedHeight)\n        .attr('fill', '#e0f3f3')\n\n      const xScale = d3.scaleLinear().domain(d3.extent(data, xAccessor)).range([0, boundedWidth])\n\n      const lineGenerator = d3\n        .line<IPoint>()\n        .x(d => xScale(d.x))\n        .y(d => yScale(d.y))\n\n      const line = svg\n        .select('.bounds')\n        .append('path')\n        .attr('d', lineGenerator(data))\n        .attr('fill', 'none')\n        .attr('stroke', '#af9358')\n        .attr('stroke-width', 2)\n\n      const yAxisGenerator = d3.axisLeft(yScale)\n      const yAxis = svg.select('.bounds').append('g').call(yAxisGenerator)\n\n      const xAxisGenerator = d3.axisBottom(xScale)\n      const xAxis = svg.select('.bounds').append('g').call(xAxisGenerator)\n    },\n    [data.length, dimensions]\n  )\n\n  return (\n    <svg\n      ref={ref}\n      style={{\n        height: 500,\n        width: '100%',\n        marginRight: '0px',\n        marginLeft: '0px'\n      }}\n    >\n      <g\n        className='bounds'\n        style={{\n          transform: `translate(${dimensions.margin.left}px, ${dimensions.margin.top}px)`\n        }}\n      />\n    </svg>\n  )\n}\n\nconst Chart = () => {\n  return (\n    <>\n      <h1>Chart</h1>\n      <DrawChart />\n    </>\n  )\n}\n\nexport default Chart\n","import React from 'react'\nimport './App.css'\nimport Chart from './Components/Charts'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <header>Hello D3JS</header>\n      <Chart />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}